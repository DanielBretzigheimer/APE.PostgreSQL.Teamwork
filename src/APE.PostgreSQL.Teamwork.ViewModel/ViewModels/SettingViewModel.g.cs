// <auto-generated>
//     This code was generated by the APE CodeGeneration.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
using System;
using System.Windows.Forms;
using System.Windows.Input;
using APE.CodeGeneration.Attributes;
using APE.PostgreSQL.Teamwork.Model.Setting;

namespace APE.PostgreSQL.Teamwork.ViewModel
{
    // APE.CodeGeneration.Attribute [NotifyProperty(typeof(string), "ConnectionString")]
    // APE.CodeGeneration.Attribute [NotifyProperty(typeof(string), "ConnectionStringPreview")]
    // APE.CodeGeneration.Attribute [NotifyProperty(typeof(string), "PgDump")]
    // APE.CodeGeneration.Attribute [NotifyProperty(typeof(string), "Password")]
    // APE.CodeGeneration.Attribute [NotifyProperty(typeof(string), "Host")]
    // APE.CodeGeneration.Attribute [NotifyProperty(typeof(string), "Id")]
    // APE.CodeGeneration.Attribute [NotifyProperty(typeof(int), "Port")]
    // APE.CodeGeneration.Attribute [NotifyProperty(typeof(string), "DatabaseFolderPath")]
    // APE.CodeGeneration.Attribute [NotifyProperty(AccessModifier.Public, typeof(bool), "OpenFilesDefault")]
    // APE.CodeGeneration.Attribute [NotifyProperty(AccessModifier.Public, typeof(bool), "AutoRefresh")]
    // APE.CodeGeneration.Attribute [AllowNullNotifyProperty(AccessModifier.Public, typeof(string), "Message", null)]
    public partial class SettingViewModel  : System.ComponentModel.INotifyPropertyChanged
    {
        //ncrunch: no coverage start

        //--------------------------------------------------------------------------------
        // generated code for NotifyProperty
        //--------------------------------------------------------------------------------

        protected static readonly System.ComponentModel.PropertyChangedEventArgs ConnectionStringEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(ConnectionString));
        private string connectionString;

        /// <summary>
        /// 
        /// </summary>
        public string ConnectionString
        {
            get
            {
                return this.connectionString;
            }
            set
            {
                if (!object.Equals(this.connectionString, value))
                {
                    //this.ConnectionStringChanging(value);
                    this.ConnectionStringBeforeSet(value);
                    this.connectionString = value;
                    this.OnPropertyChanged(ConnectionStringEventArgs);
                    //this.ConnectionStringChanged();
                    this.ConnectionStringAfterSet();
                }
            }
        }

        partial void ConnectionStringBeforeSet(string newValue);
        partial void ConnectionStringAfterSet();

        //protected virtual void ConnectionStringChanging(string newValue) { }
        //protected virtual void ConnectionStringChanged() { }

        protected static readonly System.ComponentModel.PropertyChangedEventArgs ConnectionStringPreviewEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(ConnectionStringPreview));
        private string connectionStringPreview;

        /// <summary>
        /// 
        /// </summary>
        public string ConnectionStringPreview
        {
            get
            {
                return this.connectionStringPreview;
            }
            set
            {
                if (!object.Equals(this.connectionStringPreview, value))
                {
                    //this.ConnectionStringPreviewChanging(value);
                    this.ConnectionStringPreviewBeforeSet(value);
                    this.connectionStringPreview = value;
                    this.OnPropertyChanged(ConnectionStringPreviewEventArgs);
                    //this.ConnectionStringPreviewChanged();
                    this.ConnectionStringPreviewAfterSet();
                }
            }
        }

        partial void ConnectionStringPreviewBeforeSet(string newValue);
        partial void ConnectionStringPreviewAfterSet();

        //protected virtual void ConnectionStringPreviewChanging(string newValue) { }
        //protected virtual void ConnectionStringPreviewChanged() { }

        protected static readonly System.ComponentModel.PropertyChangedEventArgs PgDumpEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(PgDump));
        private string pgDump;

        /// <summary>
        /// 
        /// </summary>
        public string PgDump
        {
            get
            {
                return this.pgDump;
            }
            set
            {
                if (!object.Equals(this.pgDump, value))
                {
                    //this.PgDumpChanging(value);
                    this.PgDumpBeforeSet(value);
                    this.pgDump = value;
                    this.OnPropertyChanged(PgDumpEventArgs);
                    //this.PgDumpChanged();
                    this.PgDumpAfterSet();
                }
            }
        }

        partial void PgDumpBeforeSet(string newValue);
        partial void PgDumpAfterSet();

        //protected virtual void PgDumpChanging(string newValue) { }
        //protected virtual void PgDumpChanged() { }

        protected static readonly System.ComponentModel.PropertyChangedEventArgs PasswordEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(Password));
        private string password;

        /// <summary>
        /// 
        /// </summary>
        public string Password
        {
            get
            {
                return this.password;
            }
            set
            {
                if (!object.Equals(this.password, value))
                {
                    //this.PasswordChanging(value);
                    this.PasswordBeforeSet(value);
                    this.password = value;
                    this.OnPropertyChanged(PasswordEventArgs);
                    //this.PasswordChanged();
                    this.PasswordAfterSet();
                }
            }
        }

        partial void PasswordBeforeSet(string newValue);
        partial void PasswordAfterSet();

        //protected virtual void PasswordChanging(string newValue) { }
        //protected virtual void PasswordChanged() { }

        protected static readonly System.ComponentModel.PropertyChangedEventArgs HostEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(Host));
        private string host;

        /// <summary>
        /// 
        /// </summary>
        public string Host
        {
            get
            {
                return this.host;
            }
            set
            {
                if (!object.Equals(this.host, value))
                {
                    //this.HostChanging(value);
                    this.HostBeforeSet(value);
                    this.host = value;
                    this.OnPropertyChanged(HostEventArgs);
                    //this.HostChanged();
                    this.HostAfterSet();
                }
            }
        }

        partial void HostBeforeSet(string newValue);
        partial void HostAfterSet();

        //protected virtual void HostChanging(string newValue) { }
        //protected virtual void HostChanged() { }

        protected static readonly System.ComponentModel.PropertyChangedEventArgs IdEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(Id));
        private string id;

        /// <summary>
        /// 
        /// </summary>
        public string Id
        {
            get
            {
                return this.id;
            }
            set
            {
                if (!object.Equals(this.id, value))
                {
                    //this.IdChanging(value);
                    this.IdBeforeSet(value);
                    this.id = value;
                    this.OnPropertyChanged(IdEventArgs);
                    //this.IdChanged();
                    this.IdAfterSet();
                }
            }
        }

        partial void IdBeforeSet(string newValue);
        partial void IdAfterSet();

        //protected virtual void IdChanging(string newValue) { }
        //protected virtual void IdChanged() { }

        protected static readonly System.ComponentModel.PropertyChangedEventArgs PortEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(Port));
        private int port;

        /// <summary>
        /// 
        /// </summary>
        public int Port
        {
            get
            {
                return this.port;
            }
            set
            {
                if (!object.Equals(this.port, value))
                {
                    //this.PortChanging(value);
                    this.PortBeforeSet(value);
                    this.port = value;
                    this.OnPropertyChanged(PortEventArgs);
                    //this.PortChanged();
                    this.PortAfterSet();
                }
            }
        }

        partial void PortBeforeSet(int newValue);
        partial void PortAfterSet();

        //protected virtual void PortChanging(int newValue) { }
        //protected virtual void PortChanged() { }

        protected static readonly System.ComponentModel.PropertyChangedEventArgs DatabaseFolderPathEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(DatabaseFolderPath));
        private string databaseFolderPath;

        /// <summary>
        /// 
        /// </summary>
        public string DatabaseFolderPath
        {
            get
            {
                return this.databaseFolderPath;
            }
            set
            {
                if (!object.Equals(this.databaseFolderPath, value))
                {
                    //this.DatabaseFolderPathChanging(value);
                    this.DatabaseFolderPathBeforeSet(value);
                    this.databaseFolderPath = value;
                    this.OnPropertyChanged(DatabaseFolderPathEventArgs);
                    //this.DatabaseFolderPathChanged();
                    this.DatabaseFolderPathAfterSet();
                }
            }
        }

        partial void DatabaseFolderPathBeforeSet(string newValue);
        partial void DatabaseFolderPathAfterSet();

        //protected virtual void DatabaseFolderPathChanging(string newValue) { }
        //protected virtual void DatabaseFolderPathChanged() { }

        protected static readonly System.ComponentModel.PropertyChangedEventArgs OpenFilesDefaultEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(OpenFilesDefault));
        private bool openFilesDefault;

        /// <summary>
        /// 
        /// </summary>
        public bool OpenFilesDefault
        {
            get
            {
                return this.openFilesDefault;
            }
            set
            {
                if (!object.Equals(this.openFilesDefault, value))
                {
                    //this.OpenFilesDefaultChanging(value);
                    this.OpenFilesDefaultBeforeSet(value);
                    this.openFilesDefault = value;
                    this.OnPropertyChanged(OpenFilesDefaultEventArgs);
                    //this.OpenFilesDefaultChanged();
                    this.OpenFilesDefaultAfterSet();
                }
            }
        }

        partial void OpenFilesDefaultBeforeSet(bool newValue);
        partial void OpenFilesDefaultAfterSet();

        //protected virtual void OpenFilesDefaultChanging(bool newValue) { }
        //protected virtual void OpenFilesDefaultChanged() { }

        protected static readonly System.ComponentModel.PropertyChangedEventArgs AutoRefreshEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(AutoRefresh));
        private bool autoRefresh;

        /// <summary>
        /// 
        /// </summary>
        public bool AutoRefresh
        {
            get
            {
                return this.autoRefresh;
            }
            set
            {
                if (!object.Equals(this.autoRefresh, value))
                {
                    //this.AutoRefreshChanging(value);
                    this.AutoRefreshBeforeSet(value);
                    this.autoRefresh = value;
                    this.OnPropertyChanged(AutoRefreshEventArgs);
                    //this.AutoRefreshChanged();
                    this.AutoRefreshAfterSet();
                }
            }
        }

        partial void AutoRefreshBeforeSet(bool newValue);
        partial void AutoRefreshAfterSet();

        //protected virtual void AutoRefreshChanging(bool newValue) { }
        //protected virtual void AutoRefreshChanged() { }

        protected static readonly System.ComponentModel.PropertyChangedEventArgs MessageEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(Message));
        private string message = null;

        /// <summary>
        /// 
        /// </summary>
        [NullGuard.AllowNull]
public string Message
        {
            get
            {
                return this.message;
            }
            set
            {
                if (!object.Equals(this.message, value))
                {
                    //this.MessageChanging(value);
                    this.MessageBeforeSet(value);
                    this.message = value;
                    this.OnPropertyChanged(MessageEventArgs);
                    //this.MessageChanged();
                    this.MessageAfterSet();
                }
            }
        }

        partial void MessageBeforeSet(string newValue);
        partial void MessageAfterSet();

        //protected virtual void MessageChanging(string newValue) { }
        //protected virtual void MessageChanged() { }

        //ncrunch: no coverage end
    }
}
