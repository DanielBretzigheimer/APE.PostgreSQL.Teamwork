// <auto-generated>
//     This code was generated by the APE CodeGeneration.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Threading;
using APE.CodeGeneration.Attributes;
using APE.PostgreSQL.Teamwork.Model;
using APE.PostgreSQL.Teamwork.Model.Setting;
using APE.PostgreSQL.Teamwork.Model.Templates;
using APE.PostgreSQL.Teamwork.ViewModel.Postgres;
using APE.PostgreSQL.Teamwork.ViewModel.TestHelper;

namespace APE.PostgreSQL.Teamwork.ViewModel
{
    // APE.CodeGeneration.Attribute [NotifyProperty(AccessModifier.Public, typeof(string), "DatabaseName", "")]
    // APE.CodeGeneration.Attribute [NotifyProperty(AccessModifier.Public, typeof(string), "DatabasePath", "")]
    // APE.CodeGeneration.Attribute [NotifyProperty(typeof(List<string>), "Databases")]
    // APE.CodeGeneration.Attribute [NotifyProperty(AccessModifier.Public, typeof(bool), "DataChecked", false)]
    // APE.CodeGeneration.Attribute [NotifyProperty(AccessModifier.Public, typeof(bool), "DatabaseExists", false)]
    // APE.CodeGeneration.Attribute [NotifyProperty(AccessModifier.Public, typeof(bool), "Loading", false)]
    // APE.CodeGeneration.Attribute [NotifyProperty(AccessModifier.PublicGetPrivateSet, typeof(bool), "CreatingDatabase", false)]
    // APE.CodeGeneration.Attribute [CtorParameter(typeof(IConnectionManager))]
    // APE.CodeGeneration.Attribute [CtorParameter(typeof(IFileSystemAccess))]
    // APE.CodeGeneration.Attribute [CtorParameter(typeof(IProcessManager))]
    // APE.CodeGeneration.Attribute [CtorParameter(typeof(IDifferenceCreator))]
    // APE.CodeGeneration.Attribute [CtorParameter(typeof(ISQLFileTester))]
    // APE.CodeGeneration.Attribute [CtorParameter(AccessModifier.Private, typeof(Action), "close")]
    public partial class AddDatabaseViewModel  : System.ComponentModel.INotifyPropertyChanged
    {
        //ncrunch: no coverage start

        //--------------------------------------------------------------------------------
        // generated code for CtorParameter
        //--------------------------------------------------------------------------------


        /// <summary>
        /// 
        /// </summary>
        private IConnectionManager connectionManager;

        /// <summary>
        /// 
        /// </summary>
        private IFileSystemAccess fileSystemAccess;

        /// <summary>
        /// 
        /// </summary>
        private IProcessManager processManager;

        /// <summary>
        /// 
        /// </summary>
        private IDifferenceCreator differenceCreator;

        /// <summary>
        /// 
        /// </summary>
        private ISQLFileTester sQLFileTester;

        /// <summary>
        /// 
        /// </summary>
        private Action close;

        public AddDatabaseViewModel(IConnectionManager connectionManager, IFileSystemAccess fileSystemAccess, IProcessManager processManager, IDifferenceCreator differenceCreator, ISQLFileTester sQLFileTester, Action close)
        {
            if (connectionManager == null)
                throw new System.ArgumentNullException("connectionManager", "connectionManager == null");
            this.connectionManager = connectionManager;

            if (fileSystemAccess == null)
                throw new System.ArgumentNullException("fileSystemAccess", "fileSystemAccess == null");
            this.fileSystemAccess = fileSystemAccess;

            if (processManager == null)
                throw new System.ArgumentNullException("processManager", "processManager == null");
            this.processManager = processManager;

            if (differenceCreator == null)
                throw new System.ArgumentNullException("differenceCreator", "differenceCreator == null");
            this.differenceCreator = differenceCreator;

            if (sQLFileTester == null)
                throw new System.ArgumentNullException("sQLFileTester", "sQLFileTester == null");
            this.sQLFileTester = sQLFileTester;

            if (close == null)
                throw new System.ArgumentNullException("close", "close == null");
            this.close = close;

            this.AddDatabaseViewModelCtor();
        }

        partial void AddDatabaseViewModelCtor();
        //--------------------------------------------------------------------------------
        // generated code for NotifyProperty
        //--------------------------------------------------------------------------------

        protected static readonly System.ComponentModel.PropertyChangedEventArgs DatabaseNameEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(DatabaseName));
        private string databaseName = "";

        public string DatabaseName
        {
            get
            {
                return this.databaseName;
            }
            set
            {
                if (!object.Equals(this.databaseName, value))
                {
                    this.DatabaseNameBeforeSet(value);
                    this.databaseName = value;
                    this.OnPropertyChanged(DatabaseNameEventArgs);
                    this.DatabaseNameAfterSet();
                }
            }
        }

        partial void DatabaseNameBeforeSet(string newValue);
        partial void DatabaseNameAfterSet();
        

        protected static readonly System.ComponentModel.PropertyChangedEventArgs DatabasePathEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(DatabasePath));
        private string databasePath = "";

        public string DatabasePath
        {
            get
            {
                return this.databasePath;
            }
            set
            {
                if (!object.Equals(this.databasePath, value))
                {
                    this.DatabasePathBeforeSet(value);
                    this.databasePath = value;
                    this.OnPropertyChanged(DatabasePathEventArgs);
                    this.DatabasePathAfterSet();
                }
            }
        }

        partial void DatabasePathBeforeSet(string newValue);
        partial void DatabasePathAfterSet();
        

        protected static readonly System.ComponentModel.PropertyChangedEventArgs DatabasesEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(Databases));
        private List<string> databases;

        public List<string> Databases
        {
            get
            {
                return this.databases;
            }
            set
            {
                if (!object.Equals(this.databases, value))
                {
                    this.DatabasesBeforeSet(value);
                    this.databases = value;
                    this.OnPropertyChanged(DatabasesEventArgs);
                    this.DatabasesAfterSet();
                }
            }
        }

        partial void DatabasesBeforeSet(List<string> newValue);
        partial void DatabasesAfterSet();
        

        protected static readonly System.ComponentModel.PropertyChangedEventArgs DataCheckedEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(DataChecked));
        private bool dataChecked = false;

        public bool DataChecked
        {
            get
            {
                return this.dataChecked;
            }
            set
            {
                if (!object.Equals(this.dataChecked, value))
                {
                    this.DataCheckedBeforeSet(value);
                    this.dataChecked = value;
                    this.OnPropertyChanged(DataCheckedEventArgs);
                    this.DataCheckedAfterSet();
                }
            }
        }

        partial void DataCheckedBeforeSet(bool newValue);
        partial void DataCheckedAfterSet();
        

        protected static readonly System.ComponentModel.PropertyChangedEventArgs DatabaseExistsEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(DatabaseExists));
        private bool databaseExists = false;

        public bool DatabaseExists
        {
            get
            {
                return this.databaseExists;
            }
            set
            {
                if (!object.Equals(this.databaseExists, value))
                {
                    this.DatabaseExistsBeforeSet(value);
                    this.databaseExists = value;
                    this.OnPropertyChanged(DatabaseExistsEventArgs);
                    this.DatabaseExistsAfterSet();
                }
            }
        }

        partial void DatabaseExistsBeforeSet(bool newValue);
        partial void DatabaseExistsAfterSet();
        

        protected static readonly System.ComponentModel.PropertyChangedEventArgs LoadingEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(Loading));
        private bool loading = false;

        public bool Loading
        {
            get
            {
                return this.loading;
            }
            set
            {
                if (!object.Equals(this.loading, value))
                {
                    this.LoadingBeforeSet(value);
                    this.loading = value;
                    this.OnPropertyChanged(LoadingEventArgs);
                    this.LoadingAfterSet();
                }
            }
        }

        partial void LoadingBeforeSet(bool newValue);
        partial void LoadingAfterSet();
        

        protected static readonly System.ComponentModel.PropertyChangedEventArgs CreatingDatabaseEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(CreatingDatabase));
        private bool creatingDatabase = false;

        public bool CreatingDatabase
        {
            get
            {
                return this.creatingDatabase;
            }
            private set
            {
                if (!object.Equals(this.creatingDatabase, value))
                {
                    this.CreatingDatabaseBeforeSet(value);
                    this.creatingDatabase = value;
                    this.OnPropertyChanged(CreatingDatabaseEventArgs);
                    this.CreatingDatabaseAfterSet();
                }
            }
        }

        partial void CreatingDatabaseBeforeSet(bool newValue);
        partial void CreatingDatabaseAfterSet();
        

        //ncrunch: no coverage end
    }
}
