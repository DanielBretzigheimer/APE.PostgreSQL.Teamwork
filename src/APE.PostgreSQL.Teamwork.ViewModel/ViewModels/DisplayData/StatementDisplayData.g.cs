// <auto-generated>
//     This code was generated by the APE CodeGeneration.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

namespace APE.PostgreSQL.Teamwork.ViewModel
{
    // APE.CodeGeneration.Attribute [NotifyProperty(typeof(IStatement), "Statement")]
    // APE.CodeGeneration.Attribute [NotifyProperty(typeof(bool), "EditMode")]
    // APE.CodeGeneration.Attribute [NotifyPropertySupport]
    public partial class StatementDisplayData
  : System.ComponentModel.INotifyPropertyChanged
    {
        //ncrunch: no coverage start

        //--------------------------------------------------------------------------------
        // generated code for NotifyProperty
        //--------------------------------------------------------------------------------

        protected static readonly System.ComponentModel.PropertyChangedEventArgs StatementEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(Statement));
        private IStatement statement;

        public IStatement Statement
        {
            get
            {
                return this.statement;
            }
            set
            {
                if (!object.Equals(this.statement, value))
                {
                    this.StatementBeforeSet(value);
                    this.statement = value;
                    this.OnPropertyChanged(StatementEventArgs);
                    this.StatementAfterSet();
                }
            }
        }

        partial void StatementBeforeSet(IStatement newValue);
        partial void StatementAfterSet();
        

        protected static readonly System.ComponentModel.PropertyChangedEventArgs EditModeEventArgs = new System.ComponentModel.PropertyChangedEventArgs(nameof(EditMode));
        private bool editMode;

        public bool EditMode
        {
            get
            {
                return this.editMode;
            }
            set
            {
                if (!object.Equals(this.editMode, value))
                {
                    this.EditModeBeforeSet(value);
                    this.editMode = value;
                    this.OnPropertyChanged(EditModeEventArgs);
                    this.EditModeAfterSet();
                }
            }
        }

        partial void EditModeBeforeSet(bool newValue);
        partial void EditModeAfterSet();
        

        //--------------------------------------------------------------------------------
        // generated code for NotifyPropertySupport
        //--------------------------------------------------------------------------------

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            this.PropertyChanged?.Invoke(this, e);
        }

        //ncrunch: no coverage end
    }
}
