// <auto-generated>
//     This code was generated by the APE CodeGeneration.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// <Version>4</Version>

#region UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\Parsers\AlterTableParser.cs
namespace APE.PostgreSQL.Teamwork.ViewModel.Test.Postgres.Parsers
{
    using System;
    using System.Collections.Generic;
    using APE.PostgreSQL.Teamwork.Model.PostgresSchema;
    using APE.PostgreSQL.Teamwork.ViewModel.Exceptions;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres.Parsers;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres;
    using APE.PostgreSQL.Teamwork.ViewModel;
    using APE.PostgreSQL.Teamwork;
    using APE.PostgreSQL;
    using APE;

    internal static class AlterTableParserExtension
    {
        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallAlterTableParserParseEnable(Parser parser, bool outputIgnoredStatements, string tableName, PgDatabase database)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(AlterTableParser));
            try
            {
                pt.InvokeStatic("ParseEnable", new object[] { parser, outputIgnoredStatements, tableName, database });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseEnable with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallAlterTableParserParseDisable(Parser parser, bool outputIgnoredStatements, string tableName, PgDatabase database)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(AlterTableParser));
            try
            {
                pt.InvokeStatic("ParseDisable", new object[] { parser, outputIgnoredStatements, tableName, database });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseDisable with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallAlterTableParserParseAddConstraint(Parser parser, PgTable table, PgSchema schema)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(AlterTableParser));
            try
            {
                pt.InvokeStatic("ParseAddConstraint", new object[] { parser, table, schema });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseAddConstraint with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallAlterTableParserParseAlterColumn(Parser parser, PgTable table)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(AlterTableParser));
            try
            {
                pt.InvokeStatic("ParseAlterColumn", new object[] { parser, table });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseAlterColumn with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallAlterTableParserParseAddForeignKey(Parser parser, PgTable table)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(AlterTableParser));
            try
            {
                pt.InvokeStatic("ParseAddForeignKey", new object[] { parser, table });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseAddForeignKey with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallAlterTableParserParseView(Parser parser, PgView view, bool outputIgnoredStatements, string viewName, PgDatabase database)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(AlterTableParser));
            try
            {
                pt.InvokeStatic("ParseView", new object[] { parser, view, outputIgnoredStatements, viewName, database });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseView with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallAlterTableParserParseSequence(Parser parser, PgSequence sequence, bool outputIgnoredStatements, string sequenceName, PgDatabase database)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(AlterTableParser));
            try
            {
                pt.InvokeStatic("ParseSequence", new object[] { parser, sequence, outputIgnoredStatements, sequenceName, database });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseSequence with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }
    }
}
#endregion UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\Parsers\AlterTableParser.cs

#region UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\Parsers\CommentParser.cs
namespace APE.PostgreSQL.Teamwork.ViewModel.Test.Postgres.Parsers
{
    using System;
    using APE.PostgreSQL.Teamwork.Model.PostgresSchema;
    using APE.PostgreSQL.Teamwork.ViewModel.Exceptions;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres.Parsers;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres;
    using APE.PostgreSQL.Teamwork.ViewModel;
    using APE.PostgreSQL.Teamwork;
    using APE.PostgreSQL;
    using APE;

    internal static class CommentParserExtension
    {
        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallCommentParserParseTable(Parser parser, PgDatabase database)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(CommentParser));
            try
            {
                pt.InvokeStatic("ParseTable", new object[] { parser, database });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseTable with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallCommentParserParseConstraint(Parser parser, PgDatabase database)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(CommentParser));
            try
            {
                pt.InvokeStatic("ParseConstraint", new object[] { parser, database });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseConstraint with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallCommentParserParseDatabase(Parser parser, PgDatabase database)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(CommentParser));
            try
            {
                pt.InvokeStatic("ParseDatabase", new object[] { parser, database });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseDatabase with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallCommentParserParseIndex(Parser parser, PgDatabase database)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(CommentParser));
            try
            {
                pt.InvokeStatic("ParseIndex", new object[] { parser, database });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseIndex with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallCommentParserParseSchema(Parser parser, PgDatabase database)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(CommentParser));
            try
            {
                pt.InvokeStatic("ParseSchema", new object[] { parser, database });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseSchema with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallCommentParserParseSequence(Parser parser, PgDatabase database)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(CommentParser));
            try
            {
                pt.InvokeStatic("ParseSequence", new object[] { parser, database });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseSequence with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallCommentParserParseTrigger(Parser parser, PgDatabase database)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(CommentParser));
            try
            {
                pt.InvokeStatic("ParseTrigger", new object[] { parser, database });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseTrigger with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallCommentParserParseView(Parser parser, PgDatabase database)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(CommentParser));
            try
            {
                pt.InvokeStatic("ParseView", new object[] { parser, database });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseView with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallCommentParserParseColumn(Parser parser, PgDatabase database)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(CommentParser));
            try
            {
                pt.InvokeStatic("ParseColumn", new object[] { parser, database });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseColumn with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallCommentParserParseFunction(Parser parser, PgDatabase database)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(CommentParser));
            try
            {
                pt.InvokeStatic("ParseFunction", new object[] { parser, database });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseFunction with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static string CallCommentParserGetComment(Parser parser)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(CommentParser));
            try
            {
                return (string)pt.InvokeStatic("GetComment", new object[] { parser });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("GetComment with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }
    }
}
#endregion UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\Parsers\CommentParser.cs

#region UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\Parsers\CreateAggregateParser.cs
namespace APE.PostgreSQL.Teamwork.ViewModel.Test.Postgres.Parsers
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using APE.PostgreSQL.Teamwork.Model.PostgresSchema;
    using APE.PostgreSQL.Teamwork.ViewModel.Exceptions;
    using log4net;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres.Parsers;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres;
    using APE.PostgreSQL.Teamwork.ViewModel;
    using APE.PostgreSQL.Teamwork;
    using APE.PostgreSQL;
    using APE;

    internal static class CreateAggregateParserExtension
    {
        [System.Diagnostics.DebuggerStepThrough()]
        internal static ILog GetCreateAggregateParserLog()
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(CreateAggregateParser));
            return (ILog)pt.GetStaticFieldOrProperty("Log");
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void SetCreateAggregateParserLog(ILog value)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(CreateAggregateParser));
            try
            {
                pt.SetStaticFieldOrProperty("Log", value);
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("Log with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }
    }
}
#endregion UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\Parsers\CreateAggregateParser.cs

#region UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\Parsers\CreateTableParser.cs
namespace APE.PostgreSQL.Teamwork.ViewModel.Test.Postgres.Parsers
{
    using System;
    using APE.PostgreSQL.Teamwork.Model.PostgresSchema;
    using APE.PostgreSQL.Teamwork.ViewModel.Exceptions;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres.Parsers;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres;
    using APE.PostgreSQL.Teamwork.ViewModel;
    using APE.PostgreSQL.Teamwork;
    using APE.PostgreSQL;
    using APE;

    internal static class CreateTableParserExtension
    {
        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallCreateTableParserParseInherits(Parser parser, PgTable table)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(CreateTableParser));
            try
            {
                pt.InvokeStatic("ParseInherits", new object[] { parser, table });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseInherits with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallCreateTableParserParseConstraint(Parser parser, PgTable table)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(CreateTableParser));
            try
            {
                pt.InvokeStatic("ParseConstraint", new object[] { parser, table });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseConstraint with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallCreateTableParserParseColumn(Parser parser, PgTable table)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(CreateTableParser));
            try
            {
                pt.InvokeStatic("ParseColumn", new object[] { parser, table });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseColumn with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }
    }
}
#endregion UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\Parsers\CreateTableParser.cs

#region UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\Parsers\Parser.cs
namespace APE.PostgreSQL.Teamwork.ViewModel.Test.Postgres.Parsers
{
    using System;
    using System.Globalization;
    using APE.PostgreSQL.Teamwork.ViewModel.Exceptions;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres.Parsers;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres;
    using APE.PostgreSQL.Teamwork.ViewModel;
    using APE.PostgreSQL.Teamwork;
    using APE.PostgreSQL;
    using APE;

    internal static class ParserExtension
    {
        [System.Diagnostics.DebuggerStepThrough()]
        internal static string CallParseString(this Parser targetClass)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                return (string)po.Invoke("ParseString", new object[] { });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseString with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static int CallGetExpressionEnd(this Parser targetClass)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                return (int)po.Invoke("GetExpressionEnd", new object[] { });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("GetExpressionEnd with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static string CallParseIdentifierInternal(this Parser targetClass)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                return (string)po.Invoke("ParseIdentifierInternal", new object[] { });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ParseIdentifierInternal with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }
    }
}
#endregion UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\Parsers\Parser.cs

#region UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\Parsers\ParserUtils.cs
namespace APE.PostgreSQL.Teamwork.ViewModel.Test.Postgres.Parsers
{
    using System.Collections.Generic;
    using System.Text;
    using APE.PostgreSQL.Teamwork.Model.PostgresSchema;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres.Parsers;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres;
    using APE.PostgreSQL.Teamwork.ViewModel;
    using APE.PostgreSQL.Teamwork;
    using APE.PostgreSQL;
    using APE;

    internal static class ParserUtilsExtension
    {
        [System.Diagnostics.DebuggerStepThrough()]
        internal static string[] CallParserUtilsSplit(string self, string regexDelimiter, bool trimTrailingEmptyStrings)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(ParserUtils));
            try
            {
                return (string[])pt.InvokeStatic("Split", new object[] { self, regexDelimiter, trimTrailingEmptyStrings });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("Split with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static string[] CallParserUtilsSplitNames(string @string)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(ParserUtils));
            try
            {
                return (string[])pt.InvokeStatic("SplitNames", new object[] { @string });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("SplitNames with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }
    }
}
#endregion UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\Parsers\ParserUtils.cs

#region UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\Parsers\PrivilegeParser.cs
namespace APE.PostgreSQL.Teamwork.ViewModel.Test.Postgres.Parsers
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using APE.PostgreSQL.Teamwork.Model.PostgresSchema;
    using APE.PostgreSQL.Teamwork.Model.PostgresSchema.Enums;
    using log4net;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres.Parsers;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres;
    using APE.PostgreSQL.Teamwork.ViewModel;
    using APE.PostgreSQL.Teamwork;
    using APE.PostgreSQL;
    using APE;

    internal static class PrivilegeParserExtension
    {
        [System.Diagnostics.DebuggerStepThrough()]
        internal static ILog GetPrivilegeParserLog()
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PrivilegeParser));
            return (ILog)pt.GetStaticFieldOrProperty("Log");
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void SetPrivilegeParserLog(ILog value)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PrivilegeParser));
            try
            {
                pt.SetStaticFieldOrProperty("Log", value);
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("Log with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static List<PgPrivilegeKind> GetPrivilegeParserenumEntries()
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PrivilegeParser));
            return (List<PgPrivilegeKind>)pt.GetStaticFieldOrProperty("enumEntries");
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void SetPrivilegeParserenumEntries(List<PgPrivilegeKind> value)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PrivilegeParser));
            try
            {
                pt.SetStaticFieldOrProperty("enumEntries", value);
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("enumEntries with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }
    }
}
#endregion UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\Parsers\PrivilegeParser.cs
