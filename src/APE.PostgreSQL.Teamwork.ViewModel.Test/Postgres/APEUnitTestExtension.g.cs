// <auto-generated>
//     This code was generated by the APE CodeGeneration.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// <Version>4</Version>

#region UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\DifferenceCreator.cs
namespace APE.PostgreSQL.Teamwork.ViewModel.Test.Postgres
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using APE.PostgreSQL.Teamwork.Model.PostgresSchema;
    using APE.PostgreSQL.Teamwork.Model.Templates;
    using APE.PostgreSQL.Teamwork.Model.Utils;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres.Loader;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres;
    using APE.PostgreSQL.Teamwork.ViewModel;
    using APE.PostgreSQL.Teamwork;
    using APE.PostgreSQL;
    using APE;

    internal static class DifferenceCreatorExtension
    {
        [System.Diagnostics.DebuggerStepThrough()]
        internal static bool CallDiffDatabaseSchemas(this DifferenceCreator targetClass, Database database, StreamWriter writer, PgDatabase oldDatabase, PgDatabase newDatabase, bool outputIgnoredStatements)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                return (bool)po.Invoke("DiffDatabaseSchemas", new object[] { database, writer, oldDatabase, newDatabase, outputIgnoredStatements });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("DiffDatabaseSchemas with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallCreateNewSchemas(this DifferenceCreator targetClass, Database database, StreamWriter writer, PgDatabase oldDatabase, PgDatabase newDatabase)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                po.Invoke("CreateNewSchemas", new object[] { database, writer, oldDatabase, newDatabase });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("CreateNewSchemas with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallDropOldSchemas(this DifferenceCreator targetClass, Database database, StreamWriter writer, PgDatabase oldDatabase, PgDatabase newDatabase)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                po.Invoke("DropOldSchemas", new object[] { database, writer, oldDatabase, newDatabase });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("DropOldSchemas with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallUpdateSchemas(this DifferenceCreator targetClass, Database database, StreamWriter writer, PgDatabase oldDatabase, PgDatabase newDatabase)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                po.Invoke("UpdateSchemas", new object[] { database, writer, oldDatabase, newDatabase });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("UpdateSchemas with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }
    }
}
#endregion UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\DifferenceCreator.cs

#region UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\PgDiffConstraints.cs
namespace APE.PostgreSQL.Teamwork.ViewModel.Test.Postgres
{
    using System.Collections.Generic;
    using System.IO;
    using APE.PostgreSQL.Teamwork.Model.PostgresSchema;
    using APE.PostgreSQL.Teamwork.Model.Utils;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres;
    using APE.PostgreSQL.Teamwork.ViewModel;
    using APE.PostgreSQL.Teamwork;
    using APE.PostgreSQL;
    using APE;

    internal static class PgDiffConstraintsExtension
    {
        [System.Diagnostics.DebuggerStepThrough()]
        internal static IList<PgConstraint> CallPgDiffConstraintsGetDropConstraints(bool primaryKey)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffConstraints));
            try
            {
                return (IList<PgConstraint>)pt.InvokeStatic("GetDropConstraints", new object[] { primaryKey });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("GetDropConstraints with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static IList<PgConstraint> CallPgDiffConstraintsGetNewConstraints(bool primaryKey, bool foreignKey)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffConstraints));
            try
            {
                return (IList<PgConstraint>)pt.InvokeStatic("GetNewConstraints", new object[] { primaryKey, foreignKey });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("GetNewConstraints with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }
    }
}
#endregion UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\PgDiffConstraints.cs

#region UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\PgDiffIndexes.cs
namespace APE.PostgreSQL.Teamwork.ViewModel.Test.Postgres
{
    using System.Collections.Generic;
    using System.IO;
    using APE.PostgreSQL.Teamwork.Model.PostgresSchema;
    using APE.PostgreSQL.Teamwork.Model.Utils;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres;
    using APE.PostgreSQL.Teamwork.ViewModel;
    using APE.PostgreSQL.Teamwork;
    using APE.PostgreSQL;
    using APE;

    internal static class PgDiffIndexesExtension
    {
        [System.Diagnostics.DebuggerStepThrough()]
        internal static IList<PgIndex> CallPgDiffIndexesGetDropIndexes()
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffIndexes));
            try
            {
                return (IList<PgIndex>)pt.InvokeStatic("GetDropIndexes", new object[] { });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("GetDropIndexes with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static IList<PgIndex> CallPgDiffIndexesGetNewIndexes()
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffIndexes));
            try
            {
                return (IList<PgIndex>)pt.InvokeStatic("GetNewIndexes", new object[] { });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("GetNewIndexes with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }
    }
}
#endregion UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\PgDiffIndexes.cs

#region UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\PgDiffTables.cs
namespace APE.PostgreSQL.Teamwork.ViewModel.Test.Postgres
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.RegularExpressions;
    using APE.PostgreSQL.Teamwork.Model.PostgresSchema;
    using APE.PostgreSQL.Teamwork.Model.Utils;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres;
    using APE.PostgreSQL.Teamwork.ViewModel;
    using APE.PostgreSQL.Teamwork;
    using APE.PostgreSQL;
    using APE;

    internal static class PgDiffTablesExtension
    {
        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallPgDiffTablesAddAlterStatistics(StreamWriter writer, PgTable oldTable, PgTable newTable, SearchPathHelper searchPathHelper)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffTables));
            try
            {
                pt.InvokeStatic("AddAlterStatistics", new object[] { writer, oldTable, newTable, searchPathHelper });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("AddAlterStatistics with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallPgDiffTablesAddAlterStorage(StreamWriter writer, PgTable oldTable, PgTable newTable, SearchPathHelper searchPathHelper)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffTables));
            try
            {
                pt.InvokeStatic("AddAlterStorage", new object[] { writer, oldTable, newTable, searchPathHelper });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("AddAlterStorage with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallPgDiffTablesAddCreateTableColumns(IList<string> statements, PgTable oldTable, PgTable newTable, IList<PgColumn> dropDefaultsColumns, bool addDefaults)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffTables));
            try
            {
                pt.InvokeStatic("AddCreateTableColumns", new object[] { statements, oldTable, newTable, dropDefaultsColumns, addDefaults });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("AddCreateTableColumns with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallPgDiffTablesAddDropTableColumns(IList<string> statements, PgTable oldTable, PgTable newTable)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffTables));
            try
            {
                pt.InvokeStatic("AddDropTableColumns", new object[] { statements, oldTable, newTable });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("AddDropTableColumns with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallPgDiffTablesAddModifyTableColumns(IList<string> statements, PgTable oldTable, PgTable newTable, IList<PgColumn> dropDefaultsColumns, bool addDefaults)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffTables));
            try
            {
                pt.InvokeStatic("AddModifyTableColumns", new object[] { statements, oldTable, newTable, dropDefaultsColumns, addDefaults });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("AddModifyTableColumns with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallPgDiffTablesCheckInherits(StreamWriter writer, PgTable oldTable, PgTable newTable, SearchPathHelper searchPathHelper)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffTables));
            try
            {
                pt.InvokeStatic("CheckInherits", new object[] { writer, oldTable, newTable, searchPathHelper });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("CheckInherits with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallPgDiffTablesCheckWithOIDS(StreamWriter writer, PgTable oldTable, PgTable newTable, SearchPathHelper searchPathHelper)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffTables));
            try
            {
                pt.InvokeStatic("CheckWithOIDS", new object[] { writer, oldTable, newTable, searchPathHelper });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("CheckWithOIDS with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallPgDiffTablesCheckTablespace(StreamWriter writer, PgTable oldTable, PgTable newTable, SearchPathHelper searchPathHelper)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffTables));
            try
            {
                pt.InvokeStatic("CheckTablespace", new object[] { writer, oldTable, newTable, searchPathHelper });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("CheckTablespace with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static List<PgTable> CallPgDiffTablesSortTablesByReferences(Dictionary<string, List<PgTable>> referencedTables, List<PgTable> dropedTables)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffTables));
            try
            {
                return (List<PgTable>)pt.InvokeStatic("SortTablesByReferences", new object[] { referencedTables, dropedTables });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("SortTablesByReferences with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallPgDiffTablesUpdateTableColumns(StreamWriter writer, PgTable oldTable, PgTable newTable, SearchPathHelper searchPathHelper)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffTables));
            try
            {
                pt.InvokeStatic("UpdateTableColumns", new object[] { writer, oldTable, newTable, searchPathHelper });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("UpdateTableColumns with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallPgDiffTablesAlterComments(StreamWriter writer, PgTable oldTable, PgTable newTable, SearchPathHelper searchPathHelper)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffTables));
            try
            {
                pt.InvokeStatic("AlterComments", new object[] { writer, oldTable, newTable, searchPathHelper });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("AlterComments with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }
    }
}
#endregion UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\PgDiffTables.cs

#region UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\PgDiffTriggers.cs
namespace APE.PostgreSQL.Teamwork.ViewModel.Test.Postgres
{
    using System.Collections.Generic;
    using System.IO;
    using APE.PostgreSQL.Teamwork.Model.PostgresSchema;
    using APE.PostgreSQL.Teamwork.Model.Utils;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres;
    using APE.PostgreSQL.Teamwork.ViewModel;
    using APE.PostgreSQL.Teamwork;
    using APE.PostgreSQL;
    using APE;

    internal static class PgDiffTriggersExtension
    {
        [System.Diagnostics.DebuggerStepThrough()]
        internal static IList<PgTrigger> CallPgDiffTriggersGetDropTriggers()
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffTriggers));
            try
            {
                return (IList<PgTrigger>)pt.InvokeStatic("GetDropTriggers", new object[] { });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("GetDropTriggers with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static IList<PgTrigger> CallPgDiffTriggersGetNewTriggers(PgTable newTable)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffTriggers));
            try
            {
                return (IList<PgTrigger>)pt.InvokeStatic("GetNewTriggers", new object[] { newTable });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("GetNewTriggers with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }
    }
}
#endregion UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\PgDiffTriggers.cs

#region UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\PgDiffTypes.cs
namespace APE.PostgreSQL.Teamwork.ViewModel.Test.Postgres
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using APE.PostgreSQL.Teamwork.Model.PostgresSchema;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres;
    using APE.PostgreSQL.Teamwork.ViewModel;
    using APE.PostgreSQL.Teamwork;
    using APE.PostgreSQL;
    using APE;

    internal static class PgDiffTypesExtension
    {
        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallPgDiffTypesAddDefinition(StreamWriter writer, PgType type, List<string> newValues, SearchPathHelper searchPathHelper)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffTypes));
            try
            {
                pt.InvokeStatic("AddDefinition", new object[] { writer, type, newValues, searchPathHelper });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("AddDefinition with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }
    }
}
#endregion UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\PgDiffTypes.cs

#region UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\PgDiffViews.cs
namespace APE.PostgreSQL.Teamwork.ViewModel.Test.Postgres
{
    using System.Collections.Generic;
    using System.IO;
    using APE.PostgreSQL.Teamwork.Model.PostgresSchema;
    using APE.PostgreSQL.Teamwork.Model.Utils;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres;
    using APE.PostgreSQL.Teamwork.ViewModel;
    using APE.PostgreSQL.Teamwork;
    using APE.PostgreSQL;
    using APE;

    internal static class PgDiffViewsExtension
    {
        [System.Diagnostics.DebuggerStepThrough()]
        internal static bool CallPgDiffViewsIsViewModified(PgView oldView, PgView newView)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffViews));
            try
            {
                return (bool)pt.InvokeStatic("IsViewModified", new object[] { oldView, newView });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("IsViewModified with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void CallPgDiffViewsDiffDefaultValues(StreamWriter writer, PgView oldView, PgView newView, SearchPathHelper searchPathHelper)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(PgDiffViews));
            try
            {
                pt.InvokeStatic("DiffDefaultValues", new object[] { writer, oldView, newView, searchPathHelper });
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("DiffDefaultValues with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }
    }
}
#endregion UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\PgDiffViews.cs

#region UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\SearchPathHelper.cs
namespace APE.PostgreSQL.Teamwork.ViewModel.Test.Postgres
{
    using System.IO;
    using APE.PostgreSQL.Teamwork.Model.PostgresSchema;
    using APE.PostgreSQL.Teamwork.Model.Utils;
    using APE.PostgreSQL.Teamwork.ViewModel.Postgres;
    using APE.PostgreSQL.Teamwork.ViewModel;
    using APE.PostgreSQL.Teamwork;
    using APE.PostgreSQL;
    using APE;

    internal static class SearchPathHelperExtension
    {
        [System.Diagnostics.DebuggerStepThrough()]
        internal static string GetsearchPath(this SearchPathHelper targetClass)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                return (string)po.GetFieldOrProperty("searchPath");
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("searchPath with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void SetsearchPath(this SearchPathHelper targetClass, string value)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                po.SetFieldOrProperty("searchPath", value);
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("searchPath with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static bool GetwasOutput(this SearchPathHelper targetClass)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                return (bool)po.GetFieldOrProperty("wasOutput");
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("wasOutput with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void SetwasOutput(this SearchPathHelper targetClass, bool value)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                po.SetFieldOrProperty("wasOutput", value);
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("wasOutput with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }
    }
}
#endregion UnittestExtension for \APE.PostgreSQL.Teamwork.ViewModel\Postgres\SearchPathHelper.cs
