// <auto-generated>
//     This code was generated by the APE CodeGeneration.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// <Version>4</Version>

#region UnittestExtension for \APE.PostgreSQL.Teamwork.Model\DatabaseVersion.cs
namespace APE.PostgreSQL.Teamwork.Model.Test
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading.Tasks;
    using APE.PostgreSQL.Teamwork.Model.Templates;
    using APE.PostgreSQL.Teamwork.Model;
    using APE.PostgreSQL.Teamwork;
    using APE.PostgreSQL;
    using APE;

    internal static class DatabaseVersionExtension
    {
        [System.Diagnostics.DebuggerStepThrough()]
        internal static EqualsAndHashCode<DatabaseVersion> GetDatabaseVersionEqualsAndHashCode()
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(DatabaseVersion));
            return (EqualsAndHashCode<DatabaseVersion>)pt.GetStaticFieldOrProperty("EqualsAndHashCode");
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void SetDatabaseVersionEqualsAndHashCode(EqualsAndHashCode<DatabaseVersion> value)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(DatabaseVersion));
            try
            {
                pt.SetStaticFieldOrProperty("EqualsAndHashCode", value);
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("EqualsAndHashCode with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static Regex GetDatabaseVersionRegexDiffVersion()
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(DatabaseVersion));
            return (Regex)pt.GetStaticFieldOrProperty("RegexDiffVersion");
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void SetDatabaseVersionRegexDiffVersion(Regex value)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(DatabaseVersion));
            try
            {
                pt.SetStaticFieldOrProperty("RegexDiffVersion", value);
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("RegexDiffVersion with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static Regex GetDatabaseVersionRegexDumpVersion()
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(DatabaseVersion));
            return (Regex)pt.GetStaticFieldOrProperty("RegexDumpVersion");
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void SetDatabaseVersionRegexDumpVersion(Regex value)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(DatabaseVersion));
            try
            {
                pt.SetStaticFieldOrProperty("RegexDumpVersion", value);
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("RegexDumpVersion with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static Regex GetDatabaseVersionRegexUndoDiffFile()
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(DatabaseVersion));
            return (Regex)pt.GetStaticFieldOrProperty("RegexUndoDiffFile");
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void SetDatabaseVersionRegexUndoDiffFile(Regex value)
        {
            var pt = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(DatabaseVersion));
            try
            {
                pt.SetStaticFieldOrProperty("RegexUndoDiffFile", value);
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("RegexUndoDiffFile with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static int GetMain(this DatabaseVersion targetClass)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                return (int)po.GetFieldOrProperty("Main");
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("Main with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void SetMain(this DatabaseVersion targetClass, int value)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                po.SetFieldOrProperty("Main", value);
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("Main with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static string GetMinor(this DatabaseVersion targetClass)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                return (string)po.GetFieldOrProperty("Minor");
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("Minor with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void SetMinor(this DatabaseVersion targetClass, string value)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                po.SetFieldOrProperty("Minor", value);
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("Minor with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }
    }
}
#endregion UnittestExtension for \APE.PostgreSQL.Teamwork.Model\DatabaseVersion.cs

#region UnittestExtension for \APE.PostgreSQL.Teamwork.Model\ExecutedFile.cs
namespace APE.PostgreSQL.Teamwork.Model.Test
{
    using System;
    using APE.PostgreSQL.Teamwork.Model;
    using APE.PostgreSQL.Teamwork;
    using APE.PostgreSQL;
    using APE;

    internal static class ExecutedFileExtension
    {
        [System.Diagnostics.DebuggerStepThrough()]
        internal static DatabaseVersion Getversion(this ExecutedFile targetClass)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                return (DatabaseVersion)po.GetFieldOrProperty("version");
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("version with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void Setversion(this ExecutedFile targetClass, DatabaseVersion value)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                po.SetFieldOrProperty("version", value);
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("version with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static DateTime GetExecutionDate(this ExecutedFile targetClass)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                return (DateTime)po.GetFieldOrProperty("ExecutionDate");
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ExecutionDate with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }

        [System.Diagnostics.DebuggerStepThrough()]
        internal static void SetExecutionDate(this ExecutedFile targetClass, DateTime value)
        {
            var po = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(targetClass);
            try
            {
                po.SetFieldOrProperty("ExecutionDate", value);
            }
            catch (System.MissingMethodException missingMethodException)
            {
                throw new System.NotSupportedException("ExecutionDate with requested parameters is not found. Rerun code generation.", missingMethodException);
            }
        }
    }
}
#endregion UnittestExtension for \APE.PostgreSQL.Teamwork.Model\ExecutedFile.cs
